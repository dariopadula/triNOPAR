#'
library(devtools)
library(np)
#'libary(here)
load_all()
#' Script de ejemplo de uso de las funciones
#'
#'
library(devtools)
library(np)
#'libary(here)
load_all()
#' Script de ejemplo de uso de las funciones
#'
#'
library(devtools)
#'libary(here)
load_all()
load_all()
libary(devtool)
libary(devtools)
library(devtools)
load_all()
load_all()
check()
check()
document()
document()
library(devtools)
load_all()
#' Script de ejemplo de uso de las funciones
#'
#'
library(devtools)
#'libary(here)
load_all()
#'libary(here)
load_all()
#'libary(here)
load_all()
load_all()
load_all()
load_all()
load_all()
#' Script de ejemplo de uso de las funciones
#'
#'
library(devtools)
#'libary(here)
load_all()
#'libary(here)
load_all()
#'libary(here)
load_all()
#'libary(here)
load_all()
load_all()
getwd()
fun=dir(R)
fun=dir("R")
getwd()
for(i in fun) source(paste0("R/",i))
source(genBancoDF)
fun=fun[grep('\\.R',fun,ignore.cases = T)]
fun=fun[grep('\\.R',fun)]
name <- function(variables) {
}
fun
for(i in fun) source(paste0("R/",i))
ventana1D()
for(i in fun) source(paste0("R/",i))
ventana1D
bancoITEMS<- genBancoDF(nparam=15)
library(np)
library(dplyr)
library(mirt)
library(mirt)
library(psych)
library(MASS)
bancoITEMS<- genBancoDF(nparam=15)
#Generamos un banco de 300 items
set.seed(12345)
m1pl=matrix(c(1,1,-2.5,2.5),byrow=T,ncol=2,nrow=2)
bancoITEMS=genitmodelo(1000,"1PL",m1pl,bancoITEMS)
m2pl=matrix(c(0.5,2,-2.5,2.5),byrow=T,ncol=2,nrow=2)
bancoITEMS=genitmodelo(1000,"2PL",m2pl,bancoITEMS)
m3pl=matrix(c(0.5,2,-2.5,2.5,0.2,0.4),byrow=T,ncol=2,nrow=3)
bancoITEMS=genitmodelo(1000,"3PL",m3pl,bancoITEMS)
diseno=matrix(c(200,"1PL"),ncol=2,byrow = T)
bancTeor = bancoTAI(bancoITEMS,diseno)
thetas=creathetas("Normal",n=10000,mean=0,sd=1)
respu=GenResp(banco = bancTeor,thetas)
# Estimacion paramétrica de los parametros en 1 dimension de bancTeor
modelo=1
tipit<-c(rep("Rasch",200))
paramsEst = estpar(respu,modelo,tipit)
aest=paramsEst$parametros$items[,"a"]
best=paramsEst$parametros$items[,"b"]
cest=paramsEst$parametros$items[,"g"]
cor(best,bancTeor[,4])
difepar=best-bancTeor[,4]
thest=paramsEst$habilidades
mean(thest)
sd(thest)
difeth=thest-thetas
itdim1=colnames(respu)[1:200]
itemsgs=list(dim1=itdim1)
pesos=list(dim1=rep(1,200))
respG=estFunG_Simple(respu,itemsgs,pesos)
thetaest = estthetaNP(scores = respG,Dth = qnorm)
cor(thetaest[,"dtg1"],thetas)
mean(thetaest[,"dtg1"])
sd(thetaest[,"dtg1"])
difeth2=thetaest[,"dtg1"]-thetas
unido=cbind(thetas,thetaest[,"dtg1"],difeth2)
hT=ventana1D(items = 1,th_use = 'dtg',test = thetaest,nucleodes="gaussian",muestra=2000)
hU=ventana1D(items = 1,th_use = 'pcg',test = thetaest,nucleodes="epanechnikov",muestra=2000)
hT
hU
ICCNPT=estRegNoPar(items=1,h=hT,th_use = 'dtg',test=thetaest,puntos=seq(-3,3,0.01),nucleo=normal,sigma=1)
ICCNPU=estRegNoPar(items=1,h=hU,th_use = 'pcg',test=thetaest,puntos=seq(0,1,0.001),nucleo=epa,sigma=1)
item=1
D=1
a=bancTeor[item,"P1"]
b=bancTeor[item,"P2"]
c=bancTeor[item,"P3"]
if(is.na(c)) c=0
thepl=ICCNPT$puntos
Prob1 <- c + (1 - c) /(1 + exp(-D * a * (thepl - b)))
estimados=paramsEst$parametros$items
ae=estimados[item,"a"]
be=estimados[item,"b"]
ce=estimados[item,"g"]
Prob2 <- ce + (1 - ce) /(1 + exp(-D * ae * (thepl - be)))
plot(thepl,Prob1,col="red",xlim=c(-4,4),ylim=c(0,1))
points(thepl,Prob2,col="cyan")
#points(thepl,icc)
points(thepl,ICCNPT$NPICC[,item],col="blue")
thepl=qnorm(seq(0,1,0.001))
plot(thepl,ICCNPU$NPICC,col="blue",xlim=c(-4,4),ylim=c(0,1))
Prob1 <- c + (1 - c) /(1 + exp(-D * a * (thepl - b)))
points(thepl,Prob1,col="red")
hdi= 0.9*length(ICCNPT$NPICC)^(-1/5)*min(sd(ICCNPT$NPICC),(quantile(ICCNPT$NPICC,prob=0.75)-quantile(ICCNPT$NPICC,prob=0.25))/1.364)
hdi
ISINPT=icciso(icc1=ICCNPT$NPICC,hd=hdi,thetaiso=seq(0,1,0.001),nt=1000,puntosicc=pnorm(ICCNPT$puntos),nucleod=epa)
thepl=qnorm(seq(0,1,0.001))
plot(thepl,ICCNPU$NPICC,col="blue",xlim=c(-4,4),ylim=c(0,1))
Prob1 <- c + (1 - c) /(1 + exp(-D * a * (thepl - b)))
points(thepl,Prob1,col="red")
plot(thepl,ISINPT$resfin)
ISINPT=icciso(icc1=ICCNPT$NPICC,hd=0.4,thetaiso=seq(0,1,0.001),nt=1000,puntosicc=pnorm(ICCNPT$puntos),nucleod=epa)
plot(thepl,ISINPT$resfin)
ISINPT=icciso(icc1=ICCNPT$NPICC,hd=0.05,thetaiso=seq(0,1,0.001),nt=1000,puntosicc=pnorm(ICCNPT$puntos),nucleod=epa)
plot(thepl,ISINPT$resfin)
#' Script de ejemplo de uso de las funciones
#'
#'
library(devtools)
#'libary(here)
load_all()
getwd()
#' Script de ejemplo de uso de las funciones
#'
#'
library(devtools)
document()
#'libary(here)
load_all()
bancoITEMS<- genBancoDF(nparam=15)
set.seed(12345)
m1pl=matrix(c(1,1,-2.5,2.5),byrow=T,ncol=2,nrow=2)
bancoITEMS=genitmodelo(1000,"1PL",m1pl,bancoITEMS)
m2pl=matrix(c(0.5,2,-2.5,2.5),byrow=T,ncol=2,nrow=2)
bancoITEMS=genitmodelo(1000,"2PL",m2pl,bancoITEMS)
m3pl=matrix(c(0.5,2,-2.5,2.5,0.2,0.4),byrow=T,ncol=2,nrow=3)
bancoITEMS=genitmodelo(1000,"3PL",m3pl,bancoITEMS)
diseno=matrix(c(200,"1PL"),ncol=2,byrow = T)
bancTeor = bancoTAI(bancoITEMS,diseno)
thetas=creathetas("Normal",n=10000,mean=0,sd=1)
respu=GenResp(banco = bancTeor,thetas)
# Estimacion paramétrica de los parametros en 1 dimension de bancTeor
modelo=1
tipit<-c(rep("Rasch",200))
paramsEst = estpar(respu,modelo,tipit)
itdim1=colnames(respu)[1:200]
itemsgs=list(dim1=itdim1)
pesos=list(dim1=rep(1,200))
respG=estFunG_Simple(respu,itemsgs,pesos)
thetaest = estthetaNP(scores = respG,Dth = qnorm)
hT=ventana1D(items = 1,th_use = 'dtg',test = thetaest,nucleodes="gaussian",muestra=2000)
hU=ventana1D(items = 1,th_use = 'pcg',test = thetaest,nucleodes="epanechnikov",muestra=2000)
ICCNPT=estRegNoPar(items=1,h=hT,th_use = 'dtg',test=thetaest,puntos=seq(-3,3,0.01),nucleo=normal,sigma=1)
ICCNPU=estRegNoPar(items=1,h=hU,th_use = 'pcg',test=thetaest,puntos=seq(0,1,0.001),nucleo=epa,sigma=1)
hT=ventana1D(items = 1,th_use = 'dtg',test = thetaest,nucleodes="gaussian",muestra=2000)
library(np)
hT=ventana1D(items = 1,th_use = 'dtg',test = thetaest,nucleodes="gaussian",muestra=2000)
hU=ventana1D(items = 1,th_use = 'pcg',test = thetaest,nucleodes="epanechnikov",muestra=2000)
ICCNPT=estRegNoPar(items=1,h=hT,th_use = 'dtg',test=thetaest,puntos=seq(-3,3,0.01),nucleo=normal,sigma=1)
ICCNPU=estRegNoPar(items=1,h=hU,th_use = 'pcg',test=thetaest,puntos=seq(0,1,0.001),nucleo=epa,sigma=1)
hdi= 0.9*length(ICCNPT$NPICC)^(-1/5)*min(sd(ICCNPT$NPICC),(quantile(ICCNPT$NPICC,prob=0.75)-quantile(ICCNPT$NPICC,prob=0.25))/1.364)
icc1=ICCNPT$NPICC
hd=0.4
thetaiso=seq(0,1,0.001)
nt=1000
puntosicc=pnorm(ICCNPT$puntos)
nucleod=epa
t=c(1:nt/nt)
t[length(t)]=0.9999
res=numeric(length(t))
fes=numeric(length(t))
auxpu=c(0,puntosicc,1)
auxic=c(icc1[1],icc1,1)
ifi1<-approx(auxpu,auxic,t)$y
for (i in 1:length(t)){
int=list()
alu=list()
for (j in 1:length(ifi1)){
inte[j]=nucleod((ifi1[j]-x)/hd,1,0)$res
integrand=function(x){nucleod((ifi1[j]-x)/hd,1,0)$res}
alu[j]=integrate(integrand,-Inf,t[i],subdivisions=10,rel.tol = 0.03,abs.tol =0.05,stop.on.error = FALSE)[[1]]
}
densi[i]=(1/(length(ifi1)*hd))*sum(unlist(inte))
fes[i]=(1/(length(ifi1)*hd))*sum(unlist(alu))
}
asi=NULL
for (i in 1:length(t)){
int=list()
alu=list()
for (j in 1:length(ifi1)){
integrand=function(x){nucleod((ifi1[j]-x)/hd,1,0)$res}
alu[j]=integrate(integrand,-Inf,t[i],subdivisions=10,rel.tol = 0.03,abs.tol =0.05,stop.on.error = FALSE)[[1]]
}
asi[i,j]=alu[j]
fes[i]=(1/(length(ifi1)*hd))*sum(unlist(alu))
}
asi=NULL
for (i in 1:length(t)){
int=list()
alu=list()
for (j in 1:length(ifi1)){
integrand=function(x){nucleod((ifi1[j]-x)/hd,1,0)$res}
alu[j]=integrate(integrand,-Inf,t[i],subdivisions=10,rel.tol = 0.03,abs.tol =0.05,stop.on.error = FALSE)[[1]]
asi[i,j]=alu[j]
}
fes[i]=(1/(length(ifi1)*hd))*sum(unlist(alu))
}
i=1
j=1
int=list()
alu=list()
integrand=function(x){nucleod((ifi1[j]-x)/hd,1,0)$res}
alu[j]=integrate(integrand,-Inf,t[i],subdivisions=10,rel.tol = 0.03,abs.tol =0.05,stop.on.error = FALSE)[[1]]
asi[i,j]=alu[j]
i
j
alu[j]
asi=NULL
asi[i,j]=alu[j]
asi[i,j]=0
class(asi)
asi=as.data.frame(NULL)
asi[i,j]=0
asi=as.data.frame(NULL)
for (i in 1:length(t)){
int=list()
alu=list()
for (j in 1:length(ifi1)){
integrand=function(x){nucleod((ifi1[j]-x)/hd,1,0)$res}
alu[j]=integrate(integrand,-Inf,t[i],subdivisions=10,rel.tol = 0.03,abs.tol =0.05,stop.on.error = FALSE)[[1]]
asi[i,j]=alu[j]
}
fes[i]=(1/(length(ifi1)*hd))*sum(unlist(alu))
}
dim(asi)
apply(asi,2,sum)
?apply
sument=apply(asi,2,sum)
plot(t,sument)
plot(sument,t)
hd
sument=apply(asi,2,sum)
fes2=(1/(length(ifi1)*hd))*sument
plot(fes2,t)
plot(t,ifi1)
plot(auxpu,auxicc)
plot(auxpu,auxic)
plot(icc1,puntosicc)
plot(puntosicc,icc1)
plot(ICCNPT$puntos,icc1)
plot(t,fes2)
plot(fes2,t)
plot(fes,t)
fes[1]
fes2[1]
sument=apply(asi,1,sum)
fes2=(1/(length(ifi1)*hd))*sument
fes2[1]
fes[100]
fes2[100]
hdi
hd=0.05048107
t=c(1:nt/nt)
t[length(t)]=0.9999
res=numeric(length(t))
fes=numeric(length(t))
auxpu=c(0,puntosicc,1)
auxic=c(icc1[1],icc1,1)
ifi1<-approx(auxpu,auxic,t)$y
asi=as.data.frame(NULL)
for (i in 1:length(t)){
int=list()
alu=list()
for (j in 1:length(ifi1)){
integrand=function(x){nucleod((ifi1[j]-x)/hd,1,0)$res}
alu[j]=integrate(integrand,-Inf,t[i],subdivisions=10,rel.tol = 0.03,abs.tol =0.05,stop.on.error = FALSE)[[1]]
asi[i,j]=alu[j]
}
fes[i]=(1/(length(ifi1)*hd))*sum(unlist(alu))
}
sument=apply(asi,1,sum)
fes2=(1/(length(ifi1)*hd))*sument
plot(fes,t)
plot(fes2,t)
plot(sument,t)
plot(fes2,t)
library(devtools)
library(np)
#'libary(here)
load_all()
#'library(dplyr)
#'library(mirt)
#'library(psych)
#'library(MASS)
#******************************************************************
#Primero generamos data frame vacio donde iran los diferentes
#items que componen nuestro banco
#Esto se debe inicializar una sola vez a menos que se quiera cambiar
#el banco completo
bancoITEMS<- genBancoDF(nparam=15)
#Generamos un banco de 300 items
set.seed(12345)
m1pl=matrix(c(1,1,-2.5,2.5),byrow=T,ncol=2,nrow=2)
bancoITEMS=genitmodelo(1000,"1PL",m1pl,bancoITEMS)
m2pl=matrix(c(0.5,2,-2.5,2.5),byrow=T,ncol=2,nrow=2)
bancoITEMS=genitmodelo(1000,"2PL",m2pl,bancoITEMS)
m3pl=matrix(c(0.5,2,-2.5,2.5,0.2,0.4),byrow=T,ncol=2,nrow=3)
bancoITEMS=genitmodelo(1000,"3PL",m3pl,bancoITEMS)
#diseno=matrix(c(100,"2PL",100,"1PL",100,"3PL"),ncol=2,byrow = T)
diseno=matrix(c(200,"1PL"),ncol=2,byrow = T)
bancTeor = bancoTAI(bancoITEMS,diseno)
thetas=creathetas("Normal",n=10000,mean=0,sd=1)
respu=GenResp(banco = bancTeor,thetas)
# Estimacion paramétrica de los parametros en 1 dimension de bancTeor
modelo=1
#tipit<-c(rep("2PL",100),rep("Rasch",100),rep("3PL",100))
tipit<-c(rep("Rasch",200))
paramsEst = estpar(respu,modelo,tipit)
#Estimados
aest=paramsEst$parametros$items[,"a"]
best=paramsEst$parametros$items[,"b"]
cest=paramsEst$parametros$items[,"g"]
#' Calcula la correlacion y diferencia entre estimado y real en el parametro b
cor(best,bancTeor[,4])
difepar=best-bancTeor[,4]
# Habilidades
thest=paramsEst$habilidades
mean(thest)
sd(thest)
difeth=thest-thetas
# Estimacion no parametrica Caso 1 dimension
itdim1=colnames(respu)[1:200]
itemsgs=list(dim1=itdim1)
pesos=list(dim1=rep(1,200))
respG=estFunG_Simple(respu,itemsgs,pesos)
thetaest = estthetaNP(scores = respG,Dth = qnorm)
cor(thetaest[,"dtg1"],thetas)
mean(thetaest[,"dtg1"])
sd(thetaest[,"dtg1"])
difeth2=thetaest[,"dtg1"]-thetas
unido=cbind(thetas,thetaest[,"dtg1"],difeth2)
#Estimacion NP
# Estimo el item 1 NP
# uso la distribucion teorica de theta y la uniforme
hT=ventana1D(items = 1,th_use = 'dtg',test = thetaest,nucleodes="gaussian",muestra=2000)
hU=ventana1D(items = 1,th_use = 'pcg',test = thetaest,nucleodes="epanechnikov",muestra=2000)
ICCNPT=estRegNoPar(items=1,h=hT,th_use = 'dtg',test=thetaest,puntos=seq(-3,3,0.01),nucleo=normal,sigma=1)
ICCNPU=estRegNoPar(items=1,h=hU,th_use = 'pcg',test=thetaest,puntos=seq(0,1,0.001),nucleo=epa,sigma=1)
#Grafica del item 1
item=1
D=1
a=bancTeor[item,"P1"]
b=bancTeor[item,"P2"]
c=bancTeor[item,"P3"]
if(is.na(c)) c=0
thepl=ICCNPT$puntos
Prob1 <- c + (1 - c) /(1 + exp(-D * a * (thepl - b)))
estimados=paramsEst$parametros$items
ae=estimados[item,"a"]
be=estimados[item,"b"]
ce=estimados[item,"g"]
Prob2 <- ce + (1 - ce) /(1 + exp(-D * ae * (thepl - be)))
plot(thepl,Prob1,col="red",xlim=c(-4,4),ylim=c(0,1))
points(thepl,Prob2,col="cyan")
#points(thepl,icc)
points(thepl,ICCNPT$NPICC[,item],col="blue")
#Graficas 2
thepl=qnorm(seq(0,1,0.001))
plot(thepl,ICCNPU$NPICC,col="blue",xlim=c(-4,4),ylim=c(0,1))
Prob1 <- c + (1 - c) /(1 + exp(-D * a * (thepl - b)))
points(thepl,Prob1,col="red")
# Estimacion is'otona del item 1
hdi= 0.9*length(ICCNPT$NPICC)^(-1/5)*min(sd(ICCNPT$NPICC),(quantile(ICCNPT$NPICC,prob=0.75)-quantile(ICCNPT$NPICC,prob=0.25))/1.364)
icc1=ICCNPT$NPICC
hd=0.4
thetaiso=seq(0,1,0.001)
nt=1000
puntosicc=pnorm(ICCNPT$puntos)
nucleod=epa
hd=hdi
hd
t=c(1:nt/nt)
t[length(t)]=0.9999
res=numeric(length(t))
fes=numeric(length(t))
auxpu=c(0,puntosicc,1)
auxic=c(icc1[1],icc1,1)
ifi1<-approx(auxpu,auxic,t)$y
asi=as.data.frame(NULL)
asa=as.data.frame(NULL)
for (i in 1:length(t)){
int=list()
alu=list()
for (j in 1:length(ifi1)){
integrand=function(x){nucleod((ifi1[j]-x)/hd,1,0)$res}
alu[j]=integrate(integrand,-Inf,t[i],subdivisions=10,rel.tol = 0.03,abs.tol =0.05,stop.on.error = FALSE)[[1]]
asi[i,j]=alu[j]
iit=0
for(k in seq(0,t[i],001)){
iit=((1/sqrt(2*pi))*exp((ifi1[j]-k)/hd))*0.001+iit
}
asa[i,j]=iit
}
fes[i]=(1/(length(ifi1)*hd))*sum(unlist(alu))
}
sument=apply(asi,1,sum)
fes2=(1/(length(ifi1)*hd))*sument
sument3=apply(asi,1,sum)
fes3=(1/(length(ifi1)*hd))*sument3
fes2
fes2[1]
fes3[1]
sument3=apply(asa,1,sum)
fes3=(1/(length(ifi1)*hd))*sument3
fes3[1]
sument3
plot(t,sument3)
summary(sument3)
seq(0,t[1],001)
seq(0,t[2],001)
seq(0,t[200],001)
seq(0,t[2000],001)
t
seq(0,1,0.0001)
t[1]
t[200]
seq(0,t[200],0.001)
asi=as.data.frame(NULL)
asa=as.data.frame(NULL)
for (i in 1:length(t)){
int=list()
alu=list()
for (j in 1:length(ifi1)){
integrand=function(x){nucleod((ifi1[j]-x)/hd,1,0)$res}
alu[j]=integrate(integrand,-Inf,t[i],subdivisions=10,rel.tol = 0.03,abs.tol =0.05,stop.on.error = FALSE)[[1]]
asi[i,j]=alu[j]
iit=0
for(k in seq(0,t[i],0.001)){
iit=((1/sqrt(2*pi))*exp((ifi1[j]-k)/hd))*0.001+iit
}
asa[i,j]=iit
}
fes[i]=(1/(length(ifi1)*hd))*sum(unlist(alu))
}
sument=apply(asi,1,sum)
fes2=(1/(length(ifi1)*hd))*sument
sument3=apply(asa,1,sum)
fes3=(1/(length(ifi1)*hd))*sument3
fes3[1]
fes3[2]
plot(t,fes3)
plot(t,fes2)
plot(fes2,t)
sument3
asa
((1/sqrt(2*pi))*exp((ifi1[1]-0)/hd))
((1/sqrt(2*pi))
1/sqrt(2*pi)
sqrt(2*pi)
2*pi
((1/sqrt(2*pi))*exp((ifi1[1]-0)/hd)^2/2)
((1/sqrt(2*pi))*exp((ifi1[1]-0)/hd)^2/2)*0.0001
((1/sqrt(2*pi))*exp((ifi1[1000]-0)/hd)^2/2)*0.0001
((1/sqrt(2*pi))*exp((-(ifi1[1000]-k)/hd))^2/2)
((1/sqrt(2*pi))*exp((-(ifi1[1]-k)/hd))^2/2)
k
ifi1[1]-k)/hd
(ifi1[1]-k)/hd
(1/sqrt(2*pi))*exp(-((ifi1[j]-k)/hd)^2/2)
(1/sqrt(2*pi))*exp(-((ifi1[1000]-0)/hd)^2/2)
(1/sqrt(2*pi))*exp(-((ifi1[1]-0)/hd)^2/2)
(1/sqrt(2*pi))*exp(-((ifi1[20]-0)/hd)^2/2)
q()
