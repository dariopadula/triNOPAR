rownames(cc) = remplazaPalabras(rownames(cc))
# rownames(cc) = gsub('Alumbrado ','Alumbrado',rownames(cc))
# rownames(cc) = gsub('Públicos','Públicos',rownames(cc))
cc[,'\\% Ingresados y finalizados en el mes'] = round(100*cc[,'Cant. Ingresados y finalizados en el mes']/cc[,'Cant. Ingresados en el mes'])
cc[,'\\% finalizados en el mes'] = round(100*cc[,'Cant. Finalizados en el mes']/cc[,'Cant. Ingresados en el mes'])
a = a + 1
# rownames(cc) = gsub('Acondicionamiento Urbano','Desarrollo Urbano',rownames(cc))
Cuadro[[a]] = cc
Caption[[a]] = paste('Cantidad de problemas ingresados y finalizados en el mes por ',tolower(Division[i]),' (',indPeriodo,')',sep = '')
nombCuadro[[a]] = paste('InfFinMes',iconv(Division[i],to="ASCII//TRANSLIT"),sep = '_')
nombFilas[[a]] = Division[i]
multiRow[[a]] = FALSE
}
#######################################
#######################################
#######################################
#####################################
#####################################
###### GUARDO CUADROS PARA EVOLUCION
listaInfo = list(indAnio = indAnio,
indMes = indMes,
codMes = codMes,
SummaryArea = summArea,
SummaryDpto = summDpto,
IngFinMesArea = Cuadro[[13]],
IngFinMesDpto = Cuadro[[14]],
AbiertosArea = CuadrosTodosAux[[1]][[1]],
AbiertosDpto = CuadrosTodosAux[[2]][[1]]
)
###### GUARDO LA INFO PARA EVOLUCION
pathEv = 'Resultados/Evolucion/'
save(listaInfo, file = paste(pathEv,indAnio,'_',codMes,'_Evolucion.RData',sep = ''))
#####################################
#####################################
###### GRAFICO EVOLUCION
fileEvAux = dir(pathEv)
fileEv = fileEvAux[-grep('_MM_',fileEvAux)]
#### ARMA BASE PARA GRAFICAR EVOLUCION
### AREA
BaseEvArea = ArmaBaseEvolucion(Tipo = 'Area',fileEv)
BaseEvArea  = lapply(BaseEvArea,function(x){
fechasAux = unique(x$Fecha)
if(length(fechasAux) > maxMeses) {
x = x[x$Fecha %in% fechasAux[(length(fechasAux) - maxMeses) + 1:length(fechasAux)],]
}
x
})
### DEPTO
BaseEvDpto = ArmaBaseEvolucion(Tipo = '',fileEv)
BaseEvDpto = lapply(BaseEvDpto,function(x){
x$Etiqueta = gsub('Acondicionamiento Urbano','Desarrollo Urbano',x$Etiqueta)
fechasAux = unique(x$Fecha)
if(length(fechasAux) > maxMeses) {
x = x[x$Fecha %in% fechasAux[(length(fechasAux) - maxMeses) + 1:length(fechasAux)],]
}
x
})
##########################################
######## GRAFICO DE PUNTOS PARA LA EVOLUCION
######### INDICADORES
#### AREA
for(kk in 1:length(BaseEvArea)) {
### CREA BASE PARA GRAFICAR
Baux = BaseEvArea[[kk]]
ordenAux = unique(Baux[,c('Fecha','Mes','Anio')])
orden = ordenAux$Fecha[order(ordenAux$Anio,ordenAux$Mes)]
Baux$Fecha = factor(Baux$Fecha,levels = orden,labels = orden)
levels = levels(Baux$Fecha)
nFechas = sort(unique(Baux$x))
# nFechas = c(min(Baux$x):max(Baux$x))
# nFechas = length(levels)
Etiqueta = unique(Baux$Etiqueta)
BauxT = Baux[Baux$Ind == 'Total problemas',]
Baux = Baux[Baux$Ind != 'Total problemas',]
EtiquetaAux = Etiqueta
if(Etiqueta == "Espacios Publicos") EtiquetaAux = "Espacios Públicos"
###### HACE GRAFICO INDICADORES
p = ggplot(Baux,aes(x = x,y = Valor))
pp = p + geom_point(aes(colour = Ind),size = 4) +
# geom_smooth(aes(colour = Ind),se = F,method = "lm") +
# geom_smooth(aes(colour = Ind),se = F) +
geom_line(aes(colour = Ind),size = 1) +
theme(legend.text = element_text(colour="black", size = 9,angle = 0)) +
scale_colour_discrete(name="Indicadores") +
theme(axis.title.x = element_text(face="bold", colour='black', size=12),
axis.text.x  = element_text(angle=90, size=10,vjust = 0.5,hjust = 1)) +
geom_text(aes(label = Valor), size = 3,
color = 'black', hjust = 0.5, vjust = -1) +
ylab('Tiempo finalización (Días)') +
xlab('Mes') +
ggtitle(paste("Evolución de la mediana, 1er y 3er cuartil\n de los tiempos de finalización para ",EtiquetaAux)) +
# theme(legend.position="top") +
scale_x_continuous(breaks=c(nFechas),
labels=levels)
###### GUARDA GRAFICO
pdf(paste(path,'/Evolucion_Area_',gsub(' ','_',Etiqueta),'.pdf',sep = ''),paper = 'special')
print(pp)
dev.off()
####### HACE GRAFICO TOTAL DE RECLAMOS FINALIZADOS
ppp = ggplot(BauxT, aes(x = Fecha, y = Valor)) +
geom_bar(stat = "identity",colour = colorBorde,fill = colorBarra) +
ylab('Total de problemas finalizados') +
xlab('Mes') +
ggtitle(paste('Evolución del total de problemas finalizados por mes del área: \n',Etiqueta,sep ='')) +
theme(axis.title.x = element_text(face="bold", colour='black', size=12),
axis.text.x  = element_text(angle=90, size=10,vjust = 0.5,hjust = 1)) +
# theme(text = element_text(size=10),
# axis.text.x = element_text(angle=90, vjust=0.5, hjust=1,size = 11,face="bold")) +
# geom_text(aes(label = Valor), size = 4, hjust = 0.5,vjust = -0.5, position = "stack")
geom_text(aes(label = Valor), size = 3.5,angle = 90,position = "stack")
###### GUARDA GRAFICO
pdf(paste(path,'/EvTotReclamosFin_Area_',gsub(' ','_',Etiqueta),'.pdf',sep = ''),paper = 'special')
print(ppp)
dev.off()
}
#### DPTO
for(kk in 1:length(BaseEvDpto)) {
### CREA BASE PARA GRAFICAR
Baux = BaseEvDpto[[kk]]
ordenAux = unique(Baux[,c('Fecha','Mes','Anio')])
orden = ordenAux$Fecha[order(ordenAux$Anio,ordenAux$Mes)]
Baux$Fecha = factor(Baux$Fecha,levels = orden,labels = orden)
levels = levels(Baux$Fecha)
nFechas = sort(unique(Baux$x))
Etiqueta = unique(Baux$Etiqueta)
BauxT = Baux[Baux$Ind == 'Total problemas',]
Baux = Baux[Baux$Ind != 'Total problemas',]
###### HACE GRAFICO
p = ggplot(Baux,aes(x = x,y = Valor))
pp = p + geom_point(aes(colour = Ind),size = 4) +
# geom_smooth(aes(colour = Ind),se = F,method = "lm") +
# geom_smooth(aes(colour = Ind),se = F) +
geom_line(aes(colour = Ind),size = 1) +
theme(legend.text = element_text(colour="black", size = 9,angle = 0)) +
theme(axis.title.x = element_text(face="bold", colour='black', size=12),
axis.text.x  = element_text(angle=90, size=10,vjust = 0.5,hjust = 1)) +
geom_text(aes(label = Valor), size = 3,
color = 'black', hjust = 0.5, vjust = -1) +
ylab('Tiempo finalización (Días)') +
xlab('Mes') +
ggtitle(paste("Evolución de la mediana, 1er y 3er cuartil\n de los tiempos de finalización para ",Etiqueta)) +
# theme(legend.position="top") +
scale_x_continuous(breaks=nFechas,
labels=levels)
###### GUARDA GRAFICO
pdf(paste(path,'/Evolucion_Dpto_',gsub(' ','_',Etiqueta),'.pdf',sep = ''),paper = 'special')
print(pp)
dev.off()
####### HACE GRAFICO TOTAL DE RECLAMOS FINALIZADOS
ppp = ggplot(BauxT, aes(x = Fecha, y = Valor)) +
geom_bar(stat = "identity",colour = colorBorde,fill = colorBarra) +
ylab('Total de problemas finalizados') +
xlab('Mes') +
ggtitle(paste('Evolución del total de problemas finalizados por mes del departamento: \n',Etiqueta,sep ='')) +
theme(axis.title.x = element_text(face="bold", colour='black', size=12),
axis.text.x  = element_text(angle=90, size=10,vjust = 0.5,hjust = 1)) +
# theme(text = element_text(size=10),
# geom_text(aes(label = Valor), size = 4, hjust = 0.5,vjust = -0.5, position = "stack")
geom_text(aes(label = Valor), size = 3.5,angle = 90,position = "stack")
###### GUARDA GRAFICO
pdf(paste(path,'/EvTotReclamosFin_Dpto_',gsub(' ','_',Etiqueta),'.pdf',sep = ''),paper = 'special')
print(ppp)
dev.off()
}
#####################################
#####################################
###### EVOLUCION PARA OTROS INDICADORES
## FinMes = Numero de finalizados en el mes
## PorcFinMes = Porcentaje de finalizados en el mes tomando un cuenta el total de ingresos
## PorcFinMesIngMes = Porcentaje de tramites ingresados y finalizados en el mes tomando en cuenta el total de ingresos en el mes
#### ARMA BASE PARA GRAFICAR EVOLUCION
### AREA
BaseEvAreaInd = ArmaBaseEvolucionV3(Tipo = 'Area',fileEv)
### DEPTO
BaseEvDptoInd = ArmaBaseEvolucionV3(Tipo = '',fileEv)
BaseEvDptoInd = lapply(BaseEvDptoInd,function(x){
x$Etiqueta = gsub('Acondicionamiento Urbano','Desarrollo Urbano',x$Etiqueta)
x
})
#############################################
####### GRAFICOS EVOLUCION INDICADORES
dfRefYlab = data.frame(label = c('% finalizados en el mes','% Ingresados y finalizados en el mes'),row.names = c('PorcFinMes','PorcFinMesIngMes'))
#### AREA
for(ii in 1:length(BaseEvAreaInd)) {
baux = BaseEvAreaInd[[ii]]
baux$Etiqueta[baux$Etiqueta %in% c('Espacios Publicos','Espacios Públicos')] = 'Espacios Públicos'
# baux = baux[!baux$Etiqueta %in% c('Salud','Transporte'),]
Ind = as.character(unique(baux$Ind))
Labels = unique(baux$Etiqueta)
Labels = c(Labels[!Labels %in% c('Total','TOTAL')],'TOTAL')
baux$Etiqueta = factor(baux$Etiqueta,levels = Labels,labels = Labels)
Orden = unique(baux[,c('Fecha','x')])
Orden = Orden[sort.int(Orden$x,index.return = T)$x,]
baux$Fecha = factor(baux$Fecha,levels = Orden[,'Fecha'])
baux = baux[baux$x > (max(baux$x) - maxMeses),]
pp = ggplot(baux,aes(x = Fecha,y = Valor,group = Etiqueta,colour = Etiqueta)) +
geom_line(size = 0.5) +
geom_point() +
geom_hline(yintercept = c(100,80,50),linetype = 2,size = 0.3) +
facet_wrap(~ Etiqueta,ncol = 2,scales = "free_y") +
theme(legend.position="none") +
theme(axis.title.x = element_text(face="bold", colour="black", size=15),
axis.text.x  = element_text(angle=90, vjust=0.5, size=5)) +
xlab('Fecha') + ylab(dfRefYlab[Ind,'label']) + theme(axis.title.x=element_blank())
pdf(paste(path,Ind,'_Area.pdf',sep = ''),paper = 'special')
print(pp)
dev.off()
}
#### DEPARTAMENTO
for(ii in 1:length(BaseEvDptoInd)) {
baux = BaseEvDptoInd[[ii]]
# baux = baux[!baux$Etiqueta %in% c('Desarrollo Social'),]
Orden = unique(baux[,c('Fecha','x')])
Orden = Orden[sort.int(Orden$x,index.return = T)$x,]
baux$Fecha = factor(baux$Fecha,levels = Orden[,'Fecha'])
baux = baux[baux$x > (max(baux$x) - maxMeses),]
Ind = as.character(unique(baux$Ind))
pp = ggplot(baux,aes(x = Fecha,y = Valor,group = Etiqueta,colour = Etiqueta)) +
geom_line(size = 0.5) +
geom_point() +
geom_hline(yintercept = c(100,80,50),linetype = 2,size = 0.3) +
facet_wrap(~ Etiqueta,ncol = 2,scales = 'free_y') +
theme(legend.position="none") +
theme(axis.title.x = element_text(face="bold", colour="black", size=15),
axis.text.x  = element_text(angle=90, vjust=0.5, size=5)) +
xlab('Fecha') + ylab(dfRefYlab[Ind,'label']) + theme(axis.title.x=element_blank())
pdf(paste(path,Ind,'_Dpto.pdf',sep = ''),paper = 'special')
print(pp)
dev.off()
}
#####################################
#####################################
###### GUARDO LA INFORMACION DE LA EVOLUCION
###### PARA USAR EN LOS INDICADORES DEL
###### TABLERO DE MANDO
# Indicadores de los finalizados vs los ingresados en el mes
# Areas
for(ii in 1:length(BaseEvAreaInd)) {
aux = BaseEvAreaInd[[ii]]
name = as.character(unique(aux[,'Ind']))
write.table(aux,file = paste("Resultados/BasesIndicTableroMando/Indicador_Area_",name,".csv",sep = ''),sep = ';',row.names = F)
}
# Dptos
for(ii in 1:length(BaseEvDptoInd)) {
aux = BaseEvDptoInd[[ii]]
name = as.character(unique(aux[,'Ind']))
write.table(aux,file = paste("Resultados/BasesIndicTableroMando/Indicador_Dpto_",name,".csv",sep = ''),sep = ';',row.names = F)
}
# Indicadores de los los tiempos de finalización de cada m?s
# Areas
aux = do.call(rbind,BaseEvArea)
auxMed = aux[aux[,'Ind'] == 'Mediana',c('Valor','Etiqueta','Fecha','Mes','Anio')]
colnames(auxMed) = c('Mediana','Area','Fecha','Mes','Anio')
write.table(auxMed,file = "Resultados/BasesIndicTableroMando/TiemposFin_Areas_Mediana.csv",sep = ';',row.names = F)
# Deptos
aux = do.call(rbind,BaseEvDpto)
auxMed = aux[aux[,'Ind'] == 'Mediana',c('Valor','Etiqueta','Fecha','Mes','Anio')]
colnames(auxMed) = c('Mediana','Dpto','Fecha','Mes','Anio')
write.table(auxMed,file = "Resultados/BasesIndicTableroMando/TiemposFin_Dpto_Mediana.csv",sep = ';',row.names = F)
#################################################################
#################################################################
############# GENERO
anioMesInd = paste(indAnio,codMes,sep = '_')
########################
### LOCAL FUN
areglaCharExtranios = function(x) {
x = gsub('Ã±','ñ',x)
x = gsub('Ãº','ú',x)
x = gsub('Ã©','é',x)
x = gsub('Ã¡','á',x)
x = gsub('Ã³','ó',x)
x = gsub('Ã','í',x)
return(x)
}
### Datos genero
datosG = read.table(paste('Bases',indAnio,indMes,nomBasesGenero,sep = '/'),header = T,sep = ';')
#######################
## Areglo detalles
datosG$AREA = gsub('Espacios Publicos','Espacios Públicos',datosG$AREA)
################################################
###### DATOS A ELIMINAR
table(datosG$TIPO_SOLICITANTE,exclude = NULL)
table(datosG$TIPO_PERSONA,exclude = NULL)
table(datosG$TIPO_SOLICITANTE,datosG$TIPO_PERSONA,exclude = NULL)
totReg = nrow(datosG)
totElim = sum(datosG$TIPO_SOLICITANTE == 'Funcionario de oficio' | datosG$TIPO_PERSONA == 'PERSONA JURIDICA COMERCIAL')
porcElim = round(100*totElim/totReg,1)
################################################
###### ARMA VARIABLES
datosG = datosG %>% dplyr::select(-starts_with('X')) %>%
filter(TIPO_SOLICITANTE != 'Funcionario de oficio' & TIPO_PERSONA != 'PERSONA JURIDICA COMERCIAL') %>%
mutate(FECHA_ING = as.Date(as.character(FECHA_INGRESO),"%d/%m/%y"),
ANIO = lubridate::year(FECHA_ING),
MES = lubridate::month(FECHA_ING),
MES = ifelse(nchar(MES) == 1,paste0('0',MES),MES),
#ANIO_MES = paste(ANIO,MES,sep = '_'),
ANIO_MES = anioMesInd,
DIA = weekdays(FECHA_ING, abbr = TRUE),
MUNICIPIO = ifelse(MUNICIPIO == '','Sin datos',MUNICIPIO),
FIN_SEMANA = as.numeric(as.character(DIA) %in% c('dom.','sáb.')))
totGen = table(datosG$SEXO)
totFEM = totGen['FEMENINO']
totMAS = totGen['MASCULINO']
totSD = totGen['SE DESCONOCE']
totDep = sum(totGen)
porcFEM = round(100*totFEM/totDep,1)
porcMAS = round(100*totMAS/totDep,1)
porcSD = round(100*totSD/totDep,1)
###################################################################
###################################################################
####### DESAGREGADO POR MUNICIPIO
varFiltro = c('ANIO_MES')
varInt = 'MUNICIPIO'
varBy = 'SEXO'
valores_ii = unique(as.character(datosG[,varFiltro[1]]))
if(length(varFiltro) == 2) {
valores_jj = unique(as.character(datosG[,varFiltro[2]]))
} else {
valores_jj = ''
}
for(ii in valores_ii[length(valores_ii)]) {
for(jj in valores_jj) {
plotBarrasGenero(datosG,varFiltro = varFiltro,valuesFiltro = c(ii,jj),returnTable = F,
savePlot = T,pathSave = 'Resultados/Temp/GENERO_')
}
}
###################################################################
###################################################################
####### DESAGREGADO POR AREA
varFiltro = c('ANIO_MES')
varInt = 'AREA'
varBy = 'SEXO'
valores_ii = unique(as.character(datosG[,varFiltro[1]]))
if(length(varFiltro) == 2) {
valores_jj = unique(as.character(datosG[,varFiltro[2]]))
} else {
valores_jj = ''
}
for(ii in valores_ii[length(valores_ii)]) {
for(jj in valores_jj) {
res = plotBarrasGenero(datosG,varFiltro = varFiltro,valuesFiltro = c(ii,jj),returnTable = T,
savePlot = T,pathSave = 'Resultados/Temp/GENERO_')
save(res,file = paste0('Resultados/EvolucionGenero/Evol_',anioMesInd,'_',varInt,'.RData'))
}
}
#########################################
######### ARMA BASE DE EVOLUCION (GENERO)
files0 = dir('Resultados/EvolucionGenero/')
filesEv = files0[grep('Evol_[0-9]',files0)]
#### Concatena los datosG
datEvolG = do.call(rbind,sapply(filesEv,function(xx) {
load(paste0('Resultados/EvolucionGenero/',xx))
list(res)
})
)
datEvolG$valX = factor(datEvolG$valFiltro1,levels = unique(datEvolG$valFiltro1))
datEvolG$X = as.numeric(datEvolG$valX)
datEvolG$VarCat = factor(datEvolG$VarCat,levels = unique(datEvolG$VarCat))
levelsVar = levels(unique(datEvolG$variable))
levelsVar = c(levelsVar[levelsVar != 'Total'],'Total')
datEvolG$variable = factor(as.character(datEvolG$variable),levels = levelsVar,labels = areglaCharExtranios(levelsVar))
pdf('Resultados/Temp/EvolucionGenero.pdf')
ggplot(datEvolG,aes(x = X,y = value, colour = VarCat)) + geom_line() + geom_point() +
theme_minimal() + scale_x_continuous(breaks=c(1:length(levels(datEvolG$valX))),
labels=levels(datEvolG$valX)) +
theme(axis.text.x = element_text(size = 6,angle = 90),
legend.position = 'top',
axis.title.x = element_blank()) + ylab('%') +
scale_colour_manual(name = '',values = c('#00b700','#dbdb00','#ff9224')) +
facet_wrap(.~variable,ncol = 3)
dev.off()
################################################################
################################################################
################################################################
################################################################
#####################################
#####################################
###### GUARDO LOS CUADROS EN LATEX
### CUADROS MULTICOLUMNA
for(i in 1 : length(Cuadro))
{
Caption[[i]] = remplazaPalabras(Caption[[i]])
Caption[[i]] = gsub('Acondicionamiento Urbano','Desarrollo Urbano',Caption[[i]])
ccAux = Cuadro[[i]]
rownames(ccAux) = gsub('Acondicionamiento Urbano','Desarrollo Urbano',rownames(ccAux))
if(nrow(ccAux) > 50) {
escala = 0.55 # Tamaño de los cuadros
} else {
escala = 0.75 # Tamaño de los cuadros
}
if(is.null(multiRow[[i]]) | !multiRow[[i]]) {
TAB = determinaAncoCol(ccAux,centrado = 'R{xxcm}',
anchoHoja = 23,caracter = 0.25,firstCol = 5,firsCenter = 'L{xxcm}')
colnames(ccAux) = sub('Dist. ','',colnames(ccAux))
XXX = atrib_Latex9_3(ccAux,TituloRowName = nombFilas[[i]],
cursiva = FALSE, posicion = "H",tabulado = TAB,Caption = Caption[[i]],
label = nombCuadro[[i]],scalebox = escala,multicolumn = FALSE)
} else {
TAB = determinaAncoCol(ccAux,centrado = 'R{xxcm}',
anchoHoja = 23,caracter = 0.25,firstCol = 5,firsCenter = 'L{xxcm}')
colnames(ccAux) = sub('Dist. ','',colnames(ccAux))
XXX = atrib_Latex9_4(ccAux,hline = TRUE,cline = TRUE,hline2 = TRUE,posL2 =c(MR[[i]]$PodMR - 1,nrow(ccAux)),
dolar = TRUE,TituloRowName = c(nombFilas[[i]],"Año"),multirow = TRUE,posMR = MR[[i]]$PodMR,largosMR = MR[[i]]$x,
negrita = TRUE,cursiva = FALSE,TextoMR = MR[[i]]$Group.1, posicion = "H",tabulado = "l|l|r|r|r",Caption = Caption[[i]],
label = nombCuadro[[i]],scalebox = escala,multicolumn = FALSE,posMC = NULL,textoMC = NULL,MCsep = FALSE)
}
fileName = paste(path,nombCuadro[[i]],".tex",sep = "")
NumeroColum = ncol(Cuadro[[i]])
write(XXX, file = fileName,ncolumns = NumeroColum,append = FALSE, sep = " ")
}
##################################################
####### GENERO EL ARCHIVO LATEX
#doc = paste(readLines('plantillaLatex/plantillaInformeSUR_V7.tex'),sep = '\\n')
# doc = paste(readLines('plantillaLatex/plantillaInformeSUR_V11.tex'),sep = '\\n')
doc = paste(readLines('plantillaLatex/plantillaInformeSUR_V12.tex'),sep = '\\n')
### SUSTIYUYO
buscar = c('XXXMES','XXXANIO','XXXPeriodo','XXXFecha','XXXtotReg','XXXtotElim','XXXtotFEM','XXXtotMAS','XXXtotSD','XXXtotDep',
'XXXporcElim','XXXporcFEM','XXXporcMAS','XXXporcSD')
remplazo = c(indMes,indAnio,indPeriodo,indFecha,totReg,totElim,totFEM,totMAS,totSD,totDep,
porcElim,porcFEM,porcMAS,porcSD)
for(k in 1 : length(buscar)) {
doc = gsub(buscar[k],remplazo[k],doc)
}
#### GUARDO EL TEX
sink(paste('Resultados/InformeLatex/',indAnio,'/',indMes,'/','InformeSUR_',indAnio,indMes,'.tex',sep = ''))
cat(doc,sep = '\n')
sink()
#################################################################
#################################################################
#################################################################
####### COMPILA EL TEX
mainDir = getwd()
texDir = paste(mainDir,'Resultados/InformeLatex',indAnio,indMes,sep = '/')
setwd(texDir)
texi2pdf(paste('InformeSUR_',indAnio,indMes,'.tex',sep = ''),
clean = TRUE, quiet = TRUE,
texi2dvi = getOption("texi2dvi"),
texinputs = NULL, index = TRUE)
setwd(mainDir)
#################################################################
#################################################################
#################################################################
###### RESUMEN EJECUTIVO
dfBuscar = data.frame(Buscar = c('XXXFecha','XXXReclamosTotales','XXXReclamosFinalizadosTotal','XXXReclamosAbiertosTotal',
'XXXReclamosFinalizadosPorcTotal','XXXReclamosAbiertosPorcTotal','XXXReclamosIngresadosTotal',
'XXXReclamosIngresadosPorcTotal','XXXReclamosProcesoTotal','XXXReclamosProcesoPorcTotal',
'XXXReclamosIngresadosMes','XXXReclamosIngresadosFinDentroMes','XXXReclamosIngresadosFinDentroPorcMes',
'XXXReclamosFinMes','XXXReclamosIngresadosFinPorcMes','XXXReclamosIngresadosFinFraseMes','XXXTiempoPromedioFinMes'))
rownames(dfBuscar) = dfBuscar[,'Buscar']
CuadroAbiertos = rbind(Cuadro[[10]][!rownames(Cuadro[[10]]) %in% rownames(Cuadro[[9]]),],Cuadro[[9]])
CuadroMes = rbind(Cuadro[[14]][!rownames(Cuadro[[14]]) %in% rownames(Cuadro[[13]]),],Cuadro[[13]])
CuadroSummary = rbind(Cuadro[[2]][!rownames(Cuadro[[2]]) %in% rownames(Cuadro[[1]]),],Cuadro[[1]])
rownames(CuadroSummary)[rownames(CuadroSummary) == 'Total'] = 'TOTAL'
rownames(CuadroSummary)[rownames(CuadroSummary) == 'Desarrollo Urbano'] = 'Acondicionamiento Urbano'
AreaDeptos = rownames(CuadroAbiertos)
for(ii in AreaDeptos) {
nomCap = gsub(' ','_',ii)
plantilla = paste(readLines('plantillaLatex/plantilaResumenEj_V1.tex'),sep = '\\n')
dfBuscar$remplazo = 'XXX'
dfBuscar['XXXFecha','remplazo'] = paste(codMes,indAnio,sep = '/')
dfBuscar['XXXReclamosTotales','remplazo'] = 'XXX'
dfBuscar['XXXReclamosFinalizadosTotal','remplazo'] = 'XXX'
dfBuscar['XXXReclamosAbiertosTotal','remplazo'] = CuadroAbiertos[ii,'Total Abiertos']
dfBuscar['XXXReclamosFinalizadosPorcTotal','remplazo'] = 'XXX'
dfBuscar['XXXReclamosAbiertosPorcTotal','remplazo'] = 'XXX'
dfBuscar['XXXReclamosIngresadosTotal','remplazo'] = CuadroAbiertos[ii,'Cant. Ingresados']
dfBuscar['XXXReclamosIngresadosPorcTotal','remplazo'] = format(round(100*CuadroAbiertos[ii,'Cant. Ingresados']/CuadroAbiertos[ii,'Total Abiertos'],1),decimal = ',')
dfBuscar['XXXReclamosProcesoTotal','remplazo'] = CuadroAbiertos[ii,'Cant. En Proceso']
dfBuscar['XXXReclamosProcesoPorcTotal','remplazo'] = format(round(100*CuadroAbiertos[ii,'Cant. En Proceso']/CuadroAbiertos[ii,'Total Abiertos'],1),decimal = ',')
dfBuscar['XXXReclamosIngresadosMes','remplazo'] = CuadroMes[ii,'Cant. Ingresados en el mes']
dfBuscar['XXXReclamosIngresadosFinDentroMes','remplazo'] = CuadroMes[ii,'Cant. Ingresados y finalizados en el mes']
dfBuscar['XXXReclamosIngresadosFinDentroPorcMes','remplazo'] = format(round(100*CuadroMes[ii,'Cant. Ingresados y finalizados en el mes']/CuadroMes[ii,'Cant. Ingresados en el mes'],1),decimal = ',')
dfBuscar['XXXReclamosFinMes','remplazo'] = CuadroMes[ii,'Cant. Finalizados en el mes']
indFinal = 100*CuadroMes[ii,'Cant. Finalizados en el mes']/CuadroMes[ii,'Cant. Ingresados en el mes']
dfBuscar['XXXReclamosIngresadosFinPorcMes','remplazo'] = format(round(indFinal,1),decimal = ',')
if(ii %in% rownames(CuadroSummary)) {
dfBuscar['XXXTiempoPromedioFinMes','remplazo'] = CuadroSummary[ii,'Media']
}
if(indFinal >= 100) {
resFrase = 'existe una capacidad de superar el volumen de reclamos del mes'
} else {
resFrase = 'que en este mes se acumularon reclamos a los que ya se tenían en espera'
}
dfBuscar['XXXReclamosIngresadosFinFraseMes','remplazo'] = resFrase
for(jj in dfBuscar[,'Buscar']) {
busca = jj
rempl = dfBuscar[jj,'remplazo']
plantilla = gsub(busca,rempl,plantilla )
}
sink(paste('Resultados/InformeLatexInfEjecutivo/',indAnio,'/',indMes,'/','InfEj_',iconv(nomCap,to="ASCII//TRANSLIT"),'.tex',sep = ''))
cat(plantilla,sep = '\n')
sink()
}
#####################################
#### ARMO EL DOCUMENTO
plantillaInforme = paste(readLines('plantillaLatex/plantilaResumenEj_Informe.tex'),sep = '\\n')
plantillaInforme = gsub('XXXFecha',indFecha,plantillaInforme)
sink(paste('Resultados/InformeLatexInfEjecutivo/',indAnio,'/',indMes,'/','InformeEjecutivoSUR_',indAnio,indMes,'.tex',sep = ''))
cat(plantillaInforme,sep = '\n')
sink()
#################################################################
#################################################################
#################################################################
####### COMPILA EL TEX
mainDir = getwd()
texDir = paste(mainDir,'Resultados/InformeLatexInfEjecutivo',indAnio,indMes,sep = '/')
setwd(texDir)
texi2pdf(paste('InformeEjecutivoSUR_',indAnio,indMes,'.tex',sep = ''),
clean = TRUE, quiet = TRUE,
texi2dvi = getOption("texi2dvi"),
texinputs = NULL, index = TRUE)
setwd(mainDir)
